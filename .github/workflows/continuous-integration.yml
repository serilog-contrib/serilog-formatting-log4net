name: Continuous Integration

on: push

env:
  Configuration: Release
  ContinuousIntegrationBuild: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
  TERM: xterm

jobs:
  package:
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    permissions:
      checks: write
    name: Run tests and create NuGet package
    outputs:
      coverage-reports: ${{ steps.dotnet-test.outputs.coverage-reports }}
      version: ${{ steps.dotnet-pack.outputs.version }}
      nupkg-filename: ${{ steps.dotnet-pack.outputs.nupkg-filename }}
      release-body: ${{ steps.tag-message.outputs.release-notes }}
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install .NET SDK
        uses: actions/setup-dotnet@v3
      - name: Retrieve cached NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Restore NuGet packages
        run: dotnet restore
      - name: Build solution
        run: dotnet build
      - name: Run tests
        run: dotnet test --no-build --logger "html;LogFileName=../../TestResults-${{ runner.os }}.html" --logger "trx;LogFileName=../../TestResults-${{ runner.os }}.trx" --logger GitHubActions
        id: dotnet-test
      - name: Upload received files from failing tests
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Received-${{ runner.os }}
          path: "**/*.received.*"
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: TestResults-${{ runner.os }}
          path: TestResults-${{ runner.os }}.html
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results (${{ runner.os }})
          path: TestResults-${{ runner.os }}.trx
          reporter: dotnet-trx
      - name: Upload coverage report to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          files: ${{ steps.dotnet-test.outputs.coverage-reports }}
      - name: Upload coverage report to Codacy
        if: matrix.os == 'ubuntu-latest' && secrets.CODACY_PROJECT_TOKEN != ''
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ${{ steps.dotnet-test.outputs.coverage-reports }}
      - name: Create NuGet package
        run: dotnet pack --no-build --output .
        id: dotnet-pack
      - name: Upload NuGet package artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.dotnet-pack.outputs.nupkg-filename }}
          path: ${{ steps.dotnet-pack.outputs.nupkg-filename }}
      - name: Run mutation tests and upload report to Stryker dashboard
        if: matrix.os == 'ubuntu-latest' && secrets.STRYKER_DASHBOARD_API_KEY != ''
        run: |
          dotnet tool restore
          dotnet tool run dotnet-stryker --reporter dashboard --version ${GITHUB_REF_NAME} --dashboard-api-key ${{ secrets.STRYKER_DASHBOARD_API_KEY }}
      - name: Retrieve tag message
        if: matrix.os == 'ubuntu-latest'
        run: |
          git fetch --tags --force
          RELEASE_NOTES=$(git tag --list ${{ steps.dotnet-pack.outputs.version }} --format='%(contents)')
          RELEASE_NOTES="${RELEASE_NOTES//'%'/%25}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/%0A}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/%0D}"
          echo "release-notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT
        id: tag-message
  publish:
    runs-on: macos-latest
    needs: package
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    name: Publish NuGet package and create GitHub release
    steps:
      - name: Download NuGet package artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.package.outputs.nupkg-filename }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Version ${{ needs.package.outputs.version }}
          tag_name: ${{ needs.package.outputs.version }}
          body: ${{ needs.package.outputs.release-body }}
          prerelease: ${{ contains(needs.package.outputs.version, '-') }}
      - name: Publish NuGet package on nuget.org
        run: dotnet nuget push ${{ needs.package.outputs.nupkg-filename }} --source https://api.nuget.org/v3/index.json --api-key "${{ secrets.NUGET_API_KEY }}"
