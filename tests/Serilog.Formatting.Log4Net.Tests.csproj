<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="AwesomeAssertions" Version="9.0.0" />
    <PackageReference Include="Microsoft.Testing.Extensions.CodeCoverage" Version="17.14.2" />
    <PackageReference Include="Microsoft.Testing.Extensions.TrxReport" Version="1.7.2" />
    <PackageReference Include="PublicApiGenerator" Version="11.4.6" />
    <PackageReference Include="ReportGenerator" Version="5.4.8" PrivateAssets="all" />
    <PackageReference Include="Serilog" Version="4.3.0" />
    <PackageReference Include="Serilog.Enrichers.Environment" Version="3.0.1" />
    <PackageReference Include="Serilog.Enrichers.Thread" Version="4.0.0" />
    <PackageReference Include="TUnit.Engine" Version="0.25.21" />
    <PackageReference Include="Verify.TUnit" Version="30.4.0" />
  </ItemGroup>

  <PropertyGroup Label="Coverage">
    <RootDirectory>$([System.IO.Directory]::GetParent($(MSBuildProjectDirectory)))</RootDirectory>
    <CoverageReportDirectory>$([System.IO.Path]::GetFullPath($([System.IO.Path]::Combine($(RootDirectory),'coverage',$(TargetFramework)))))</CoverageReportDirectory>
    <CoverageReportFile>$([System.IO.Path]::Combine($(CoverageReportDirectory),'$(MSBuildProjectName).cobertura.xml'))</CoverageReportFile>
    <ArgsCoverage>--coverage --coverage-output-format cobertura --coverage-output $(CoverageReportFile)</ArgsCoverage>
    <ArgsTrx Condition="$(ContinuousIntegrationBuild) == 'true'"> --report-trx --report-trx-filename $(MSBuildProjectName).trx --results-directory $(RootDirectory)</ArgsTrx>
    <TestingPlatformCommandLineArguments>$(ArgsCoverage)$(ArgsTrx)</TestingPlatformCommandLineArguments>
  </PropertyGroup>

  <Target Name="GenerateCoverageReports" AfterTargets="VSTest" Condition="$(TargetFramework) != ''">
    <ItemGroup>
      <CoverageReport Include="$(CoverageReportDirectory)/*.cobertura.xml" />
    </ItemGroup>
    <ReportGenerator ReportFiles="@(CoverageReport)" TargetDirectory="$(CoverageReportDirectory)" ReportTypes="HtmlInline;TextSummary" />
  </Target>

  <Target Name="DisplayCoverageSummary" AfterTargets="GenerateCoverageReports" Condition="$(TargetFramework) != ''">
    <PropertyGroup>
      <CatCommand Condition="!$([MSBuild]::IsOSPlatform('Windows'))">cat</CatCommand>
      <CatCommand Condition="$([MSBuild]::IsOSPlatform('Windows'))">type</CatCommand>
    </PropertyGroup>
    <Exec WorkingDirectory="$(CoverageReportDirectory)" Command="$(CatCommand) Summary.txt" />
  </Target>
  
  <Target Name="OpenHtmlCoverageReport" AfterTargets="DisplayCoverageSummary" Condition="$(TargetFramework) != '' AND $(ContinuousIntegrationBuild) != 'true'">
    <PropertyGroup>
      <OpenCommand Condition="$([MSBuild]::IsOSPlatform('Linux'))">xdg-open</OpenCommand>
      <OpenCommand Condition="$([MSBuild]::IsOSPlatform('OSX'))">open</OpenCommand>
      <OpenCommand Condition="$([MSBuild]::IsOSPlatform('Windows'))">explorer</OpenCommand>
    </PropertyGroup>
    <!-- executing "explorer path\to\index.html" returns exit code 1, so we ignore it -->
    <Exec WorkingDirectory="$(CoverageReportDirectory)" Command="$(OpenCommand) index.html" Condition="$(OpenCommand) != ''" IgnoreExitCode="true" />
  </Target>

  <ItemGroup>
    <ProjectReference Include="../src/Serilog.Formatting.Log4Net.csproj">
      <!-- Run with `dotnet test -p:TestNetStandard20=true` in order to test the netstandard2.0 implementation -->
      <SetTargetFramework Condition="$(TestNetStandard20) == 'true'">TargetFramework=netstandard2.0</SetTargetFramework>
    </ProjectReference>
  </ItemGroup>

  <ItemGroup>
    <Compile Remove="PublicApi.*.cs" />
    <None Include="PublicApi.*.cs" />
  </ItemGroup>

</Project>
